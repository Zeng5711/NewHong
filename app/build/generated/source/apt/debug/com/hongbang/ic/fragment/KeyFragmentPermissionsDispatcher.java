// This file was generated by PermissionsDispatcher. Do not modify!
package com.hongbang.ic.fragment;

import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;
import permissions.dispatcher.v13.PermissionUtilsV13;

final class KeyFragmentPermissionsDispatcher {
  private static final int REQUEST_STARTBRUSHCARD = 2;

  private static final String[] PERMISSION_STARTBRUSHCARD = new String[] {"android.permission.ACCESS_FINE_LOCATION","android.permission.ACCESS_COARSE_LOCATION"};

  private KeyFragmentPermissionsDispatcher() {
  }

  static void startBrushCardWithCheck(KeyFragment target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_STARTBRUSHCARD)) {
      target.startBrushCard();
    } else {
      if (PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_STARTBRUSHCARD)) {
        target.onShowRationale(new StartBrushCardPermissionRequest(target));
      } else {
        PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_STARTBRUSHCARD, REQUEST_STARTBRUSHCARD);
      }
    }
  }

  static void onRequestPermissionsResult(KeyFragment target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_STARTBRUSHCARD:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_STARTBRUSHCARD)) {
        target.onPermissionDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.startBrushCard();
      } else {
        if (!PermissionUtilsV13.getInstance().shouldShowRequestPermissionRationale(target, PERMISSION_STARTBRUSHCARD)) {
          target.onNeverAskAgain();
        } else {
          target.onPermissionDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class StartBrushCardPermissionRequest implements PermissionRequest {
    private final WeakReference<KeyFragment> weakTarget;

    private StartBrushCardPermissionRequest(KeyFragment target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      KeyFragment target = weakTarget.get();
      if (target == null) return;
      PermissionUtilsV13.getInstance().requestPermissions(target, PERMISSION_STARTBRUSHCARD, REQUEST_STARTBRUSHCARD);
    }

    @Override
    public void cancel() {
      KeyFragment target = weakTarget.get();
      if (target == null) return;
      target.onPermissionDenied();
    }
  }
}
