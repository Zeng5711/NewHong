// This file was generated by PermissionsDispatcher. Do not modify!
package com.hongbang.ic.activity;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class RepairActivityPermissionsDispatcher {
  private static final int REQUEST_CHOOSEIMAGE = 1;

  private static final String[] PERMISSION_CHOOSEIMAGE = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private RepairActivityPermissionsDispatcher() {
  }

  static void chooseImageWithCheck(RepairActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_CHOOSEIMAGE)) {
      target.chooseImage();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_CHOOSEIMAGE)) {
        target.showNoSdcardPermissions(new ChooseImagePermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_CHOOSEIMAGE, REQUEST_CHOOSEIMAGE);
      }
    }
  }

  static void onRequestPermissionsResult(RepairActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_CHOOSEIMAGE:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_CHOOSEIMAGE)) {
        target.showDeniedForSdcard();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.chooseImage();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_CHOOSEIMAGE)) {
          target.showDeniedForSdcard();
        } else {
          target.showDeniedForSdcard();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class ChooseImagePermissionRequest implements PermissionRequest {
    private final WeakReference<RepairActivity> weakTarget;

    private ChooseImagePermissionRequest(RepairActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      RepairActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_CHOOSEIMAGE, REQUEST_CHOOSEIMAGE);
    }

    @Override
    public void cancel() {
      RepairActivity target = weakTarget.get();
      if (target == null) return;
      target.showDeniedForSdcard();
    }
  }
}
